#!/bin/env python
#
# chkconfig:   2345 81 03
#
import os,sys
sys.path.append('/opt/fff') #needed if dependency in same dir?
from daemon2 import Daemon2
from subprocess import Popen
from subprocess import PIPE
import time
import syslog

def esClusterName():
    try:
      with open('/etc/elasticsearch/elasticsearch.yml') as fi:
        lines = fi.readlines()
        for line in lines:
          sline = line.strip()
          if line.startswith("cluster.name"):
            return line.split(':')[1].strip()
    except:
      pass
    return ""


def startService(daemon):
    escname = esClusterName()
    if not (escname.startswith('es-vm-cdaq') or escname.startswith('es-cdaq')):
      print "Service is disabled on non central es machine"
      return
    daemon.touchLockFile()
    proc = Popen(["/opt/fff/river-daemon.py","--daemon"], stdout=PIPE)
    output = proc.communicate()[0]
    tries=10 #allow 1 second for forking to happen
    while True:
        time.sleep(.1)
        if daemon.silentStatus() and proc.returncode==0:
            print 'Starting riverd',':\t\t\t\t [  \033[1;32mOK\033[0;39m  ]'
            daemon.touchLockFile()
            return
        else:
            if proc.returncode==3:sys.exit(0)
            tries-=1
            if tries>0:continue
            print 'Starting riverd',':\t\t\t\t [  \033[1;31mFAILED\033[0;39m  ]'
            print output
            sys.exit(1)


if __name__ == "__main__":

    daemon = Daemon2('river-daemon','main',kill_timeout=30.)

    if len(sys.argv) >= 2:
        if 'start' == sys.argv[1]:
            startService(daemon)

        elif 'stop' == sys.argv[1]:
            sys.stdout.write('Stopping riverd')
            daemon.stop(do_umount=False)
            daemon.removeLockFile()

        elif 'restart' == sys.argv[1]:
            sys.stdout.write('Stopping riverd')
            daemon.stop(do_umount=False)
            startService(daemon)

        elif 'status' == sys.argv[1]:
            daemon.status()
        else:
            print "Unknown command"
            sys.exit(2)

    else:
        print "usage: %s start|restart|status"
        sys.exit(2)

sys.exit(0)
